# Configuration file

filterDiamond {
    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines how many hits it takes to break the block.
    #  -1 makes the block indestructible. [range: -1.0 ~ 3.4028235E38, default: 1.5]
    S:hardness=1.5

    # Defines the block resistance to explosions. [range: 0.0 ~ 3.4028235E38, default: 30.0]
    S:resistance=30.0

    ForgeEnergy {
        # Maximum amount of energy that can be held [range: 0 ~ 100000, default: 6400]
        I:capacity=6400

        # Amount of energy consumed per operation or second [range: 0 ~ 1000, default: 50]
        I:consumption=50

        # Whether Forge Energy is required or not [default: false]
        B:enabled=false
    }

    AirPurifier {
        # Defines the radius of the area in which the purified air created by this purifier has the maximum effect [range: 0 ~ 32, default: 1]
        I:effectiveRadius=1

        # Defines the maximum radius of the purified air effect.
        # The effect will fade between effectiveRadius and maxRadius [range: 0 ~ 32, default: 32]
        I:maximumRadius=32
    }

    WaterPurifier {
        # Defines the efficiency of the purifier (in percent).
        # The lower the efficiency, the more filter material will be used up and the longer the cleaning process will take. [range: 0.0 ~ 100.0, default: 48.0]
        S:efficiency=48.0

        # Defines the maximum cleaning radius of the purifier (in blocks). [range: 0 ~ 16, default: 9]
        I:maximumRadius=9

        # Defines the update interval (in seconds).
        # The smaller the interval, the higher the cleaning speed. [range: 1 ~ 120, default: 10]
        I:updateInterval=10
    }

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [paneGlass], [gemDiamond]]
            S:components <
                paneGlass
                gemDiamond
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:diamond_filter]
            S:output=adpother:diamond_filter

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 212 101 212]
            S:pattern=212 101 212
        }

    }

}


filterGold {
    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines how many hits it takes to break the block.
    #  -1 makes the block indestructible. [range: -1.0 ~ 3.4028235E38, default: 1.5]
    S:hardness=1.5

    # Defines the block resistance to explosions. [range: 0.0 ~ 3.4028235E38, default: 30.0]
    S:resistance=30.0

    ForgeEnergy {
        # Maximum amount of energy that can be held [range: 0 ~ 100000, default: 3200]
        I:capacity=3200

        # Amount of energy consumed per operation or second [range: 0 ~ 1000, default: 50]
        I:consumption=50

        # Whether Forge Energy is required or not [default: false]
        B:enabled=false
    }

    AirPurifier {
        # Defines the radius of the area in which the purified air created by this purifier has the maximum effect [range: 0 ~ 32, default: 1]
        I:effectiveRadius=1

        # Defines the maximum radius of the purified air effect.
        # The effect will fade between effectiveRadius and maxRadius [range: 0 ~ 32, default: 16]
        I:maximumRadius=16
    }

    WaterPurifier {
        # Defines the efficiency of the purifier (in percent).
        # The lower the efficiency, the more filter material will be used up and the longer the cleaning process will take. [range: 0.0 ~ 100.0, default: 24.0]
        S:efficiency=24.0

        # Defines the maximum cleaning radius of the purifier (in blocks). [range: 0 ~ 16, default: 5]
        I:maximumRadius=5

        # Defines the update interval (in seconds).
        # The smaller the interval, the higher the cleaning speed. [range: 1 ~ 120, default: 10]
        I:updateInterval=10
    }

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [paneGlass], [ingotGold]]
            S:components <
                paneGlass
                ingotGold
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:gold_filter]
            S:output=adpother:gold_filter

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 212 101 212]
            S:pattern=212 101 212
        }

    }

}


filterIron {
    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines how many hits it takes to break the block.
    #  -1 makes the block indestructible. [range: -1.0 ~ 3.4028235E38, default: 1.5]
    S:hardness=1.5

    # Defines the block resistance to explosions. [range: 0.0 ~ 3.4028235E38, default: 30.0]
    S:resistance=30.0

    ForgeEnergy {
        # Maximum amount of energy that can be held [range: 0 ~ 100000, default: 1600]
        I:capacity=1600

        # Amount of energy consumed per operation or second [range: 0 ~ 1000, default: 50]
        I:consumption=50

        # Whether Forge Energy is required or not [default: false]
        B:enabled=false
    }

    AirPurifier {
        # Defines the radius of the area in which the purified air created by this purifier has the maximum effect [range: 0 ~ 32, default: 1]
        I:effectiveRadius=1

        # Defines the maximum radius of the purified air effect.
        # The effect will fade between effectiveRadius and maxRadius [range: 0 ~ 32, default: 8]
        I:maximumRadius=8
    }

    WaterPurifier {
        # Defines the efficiency of the purifier (in percent).
        # The lower the efficiency, the more filter material will be used up and the longer the cleaning process will take. [range: 0.0 ~ 100.0, default: 12.0]
        S:efficiency=12.0

        # Defines the maximum cleaning radius of the purifier (in blocks). [range: 0 ~ 16, default: 3]
        I:maximumRadius=3

        # Defines the update interval (in seconds).
        # The smaller the interval, the higher the cleaning speed. [range: 1 ~ 120, default: 10]
        I:updateInterval=10
    }

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [paneGlass], [ingotIron]]
            S:components <
                paneGlass
                ingotIron
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:iron_filter]
            S:output=adpother:iron_filter

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 212 101 212]
            S:pattern=212 101 212
        }

    }

}


