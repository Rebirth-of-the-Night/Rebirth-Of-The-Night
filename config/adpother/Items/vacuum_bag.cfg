# Configuration file

bagVacuumDiamond {
    # Defines the maximum capacity of the bag. [range: 0 ~ 2147483647, default: 512]
    I:capacity=512

    # Defines durability of the item. [range: 0 ~ 65535, default: 64]
    I:durability=64

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines anvil repair materials.
    # You can define several materials by separating them with commas (e.g.: minecraft:leather, #wool) [default: leather]
    S:repair=leather

    # If true, repair cost will grow for this item after each repair using an anvil. [default: false]
    B:repairCostGrow=false

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [slimeball], [wool:*], [leather], [leather_chestplate], [gemDiamond]]
            S:components <
                slimeball
                wool:*
                leather
                leather_chestplate
                gemDiamond
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:diamond_vacuum_bag]
            S:output=adpother:diamond_vacuum_bag

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 122 545 333]
            S:pattern=122 545 333
        }

    }

}


bagVacuumGold {
    # Defines the maximum capacity of the bag. [range: 0 ~ 2147483647, default: 256]
    I:capacity=256

    # Defines durability of the item. [range: 0 ~ 65535, default: 64]
    I:durability=64

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines anvil repair materials.
    # You can define several materials by separating them with commas (e.g.: minecraft:leather, #wool) [default: leather]
    S:repair=leather

    # If true, repair cost will grow for this item after each repair using an anvil. [default: false]
    B:repairCostGrow=false

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [slimeball], [wool:*], [leather], [leather_chestplate], [ingotGold]]
            S:components <
                slimeball
                wool:*
                leather
                leather_chestplate
                ingotGold
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:gold_vacuum_bag]
            S:output=adpother:gold_vacuum_bag

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 122 545 333]
            S:pattern=122 545 333
        }

    }

}


bagVacuumIron {
    # Defines the maximum capacity of the bag. [range: 0 ~ 2147483647, default: 128]
    I:capacity=128

    # Defines durability of the item. [range: 0 ~ 65535, default: 64]
    I:durability=64

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines anvil repair materials.
    # You can define several materials by separating them with commas (e.g.: minecraft:leather, #wool) [default: leather]
    S:repair=leather

    # If true, repair cost will grow for this item after each repair using an anvil. [default: false]
    B:repairCostGrow=false

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [slimeball], [wool:*], [leather], [leather_chestplate], [ingotIron]]
            S:components <
                slimeball
                wool:*
                leather
                leather_chestplate
                ingotIron
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:iron_vacuum_bag]
            S:output=adpother:iron_vacuum_bag

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 122 545 333]
            S:pattern=122 545 333
        }

    }

}


