# Configuration file

tubeVacuumDiamond {
    # Defines the ability to suck pollution into a player's inventory [default: false]
    B:canSuckIntoInventory=false

    # Defines durability of the item. [range: 0 ~ 65535, default: 144]
    I:durability=144

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines anvil repair materials.
    # You can define several materials by separating them with commas (e.g.: minecraft:leather, #wool) [default: gemDiamond]
    S:repair=gemDiamond

    # If true, repair cost will grow for this item after each repair using an anvil. [default: false]
    B:repairCostGrow=false

    # Defines operating speed for the vacuum cleaner. [range: 0.0 ~ 1.0, default: 0.8]
    S:speed=0.8

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [blockDiamond], [ingotIron], [stone_button], [comparator], [repeater]]
            S:components <
                blockDiamond
                ingotIron
                stone_button
                comparator
                repeater
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:diamond_vacuum_tube]
            S:output=adpother:diamond_vacuum_tube

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 001 320 540]
            S:pattern=001 320 540
        }

    }

}


tubeVacuumGold {
    # Defines the ability to suck pollution into a player's inventory [default: false]
    B:canSuckIntoInventory=false

    # Defines durability of the item. [range: 0 ~ 65535, default: 72]
    I:durability=72

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines anvil repair materials.
    # You can define several materials by separating them with commas (e.g.: minecraft:leather, #wool) [default: ingotGold]
    S:repair=ingotGold

    # If true, repair cost will grow for this item after each repair using an anvil. [default: false]
    B:repairCostGrow=false

    # Defines operating speed for the vacuum cleaner. [range: 0.0 ~ 1.0, default: 0.4]
    S:speed=0.4

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [blockGold], [ingotIron], [stone_button], [comparator], [repeater]]
            S:components <
                blockGold
                ingotIron
                stone_button
                comparator
                repeater
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:gold_vacuum_tube]
            S:output=adpother:gold_vacuum_tube

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 001 320 540]
            S:pattern=001 320 540
        }

    }

}


tubeVacuumIron {
    # Defines the ability to suck pollution into a player's inventory [default: false]
    B:canSuckIntoInventory=false

    # Defines durability of the item. [range: 0 ~ 65535, default: 60]
    I:durability=60

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines anvil repair materials.
    # You can define several materials by separating them with commas (e.g.: minecraft:leather, #wool) [default: ingotIron]
    S:repair=ingotIron

    # If true, repair cost will grow for this item after each repair using an anvil. [default: false]
    B:repairCostGrow=false

    # Defines operating speed for the vacuum cleaner. [range: 0.0 ~ 1.0, default: 0.2]
    S:speed=0.2

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [blockIron], [ingotIron], [stone_button], [comparator], [repeater]]
            S:components <
                blockIron
                ingotIron
                stone_button
                comparator
                repeater
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adpother:iron_vacuum_tube]
            S:output=adpother:iron_vacuum_tube

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 001 320 540]
            S:pattern=001 320 540
        }

    }

}


